package com.zuowei.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHOOLMATE".
*/
public class SchoolmateDao extends AbstractDao<Schoolmate, String> {

    public static final String TABLENAME = "SCHOOLMATE";

    /**
     * Properties of entity Schoolmate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property FriendState = new Property(1, Integer.class, "friendState", false, "FRIEND_STATE");
        public final static Property CreateAt = new Property(2, java.util.Date.class, "createAt", false, "CREATE_AT");
    }


    public SchoolmateDao(DaoConfig config) {
        super(config);
    }
    
    public SchoolmateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHOOLMATE\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"FRIEND_STATE\" INTEGER," + // 1: friendState
                "\"CREATE_AT\" INTEGER);"); // 2: createAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHOOLMATE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Schoolmate entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        Integer friendState = entity.getFriendState();
        if (friendState != null) {
            stmt.bindLong(2, friendState);
        }
 
        java.util.Date createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindLong(3, createAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Schoolmate readEntity(Cursor cursor, int offset) {
        Schoolmate entity = new Schoolmate( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // friendState
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)) // createAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Schoolmate entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFriendState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCreateAt(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Schoolmate entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Schoolmate entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
